########################################################################################################################
# This file was generated using python_env, please do not edit directly.
########################################################################################################################
stages:
    - image
    - test

variables:
    # Set up pip cache shared between all jobs of the project.
    PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
    TOX_PARALLEL_NO_SPINNER: 1

cache:
    paths:
        - .cache/pip

########################################################################################################################
# Docker
.image:
    stage: image
    before_script:
        - docker info
    script:
        # Login to GitLab container registry https://docs.gitlab.com/ee/ci/docker/using_docker_build.html#using-the-gitlab-container-registry
        - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY
        - docker build --pull --build-arg PYTHON_VERSION=$PYTHON_VERSION --tag "$IMAGE_TAG" --file docker/Dockerfile .
        - docker push "$IMAGE_TAG"
    tags:
        - dind
    variables:
        IMAGE_TAG: "$CI_REGISTRY_IMAGE/tox:$PYTHON_VERSION"

image:py36:
    extends: .image
    variables:
        PYTHON_VERSION: "3.6"

image:py37:
    extends: .image
    variables:
        PYTHON_VERSION: "3.7"

image:py38:
    extends: .image
    variables:
        PYTHON_VERSION: "3.8"

image:py39:
    extends: .image
    variables:
        PYTHON_VERSION: "3.9"

image:conformance:
    extends: .image
    script:
        # Login to GitLab container registry https://docs.gitlab.com/ee/ci/docker/using_docker_build.html#using-the-gitlab-container-registry
        - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY
        - docker build --pull --tag "$IMAGE_TAG" --file docker/conformance/Dockerfile .
        - docker push "$IMAGE_TAG"
    variables:
        IMAGE_TAG: "$CI_REGISTRY_IMAGE/conformance:latest"

########################################################################################################################
# Basic declarations
.py36: &py36
    image: "$CI_REGISTRY_IMAGE/tox:3.6"

.py37: &py37
    image: "$CI_REGISTRY_IMAGE/tox:3.7"

.py38: &py38
    image: "$CI_REGISTRY_IMAGE/tox:3.8"

.py39: &py39
    image: "$CI_REGISTRY_IMAGE/tox:3.9"

.test: &test
    script:
        # First, build all virtualenvs in parallel without actually executing any tests.
        - tox --parallel all --notest
        - tox

.test-thaw: &test-thaw
    only:
        - schedules
    script:
        - tox -e py36-thaw,py37-thaw,py38-thaw,py39-thaw

########################################################################################################################
# Individual jobs
licensing:
    script:
        - git clone git@gitlab.office.nic.cz:internal-tools/license-check.git --single-branch --depth 1
        - ./license-check/license-check.sh -v

piprot:
    <<: *py39
    only:
        - schedules
    script:
        - pip install piprot
        - piprot requirements.txt constraints.txt
    allow_failure: true

test:py36:
    <<: *test
    <<: *py36

test:py37:
    <<: *test
    <<: *py37

test:py38:
    <<: *test
    <<: *py38

test:py39:
    <<: *test
    <<: *py39

test:py36-thaw:
    <<: *test-thaw
    <<: *py36

test:py37-thaw:
    <<: *test-thaw
    <<: *py37

test:py38-thaw:
    <<: *test-thaw
    <<: *py38

test:py39-thaw:
    <<: *test-thaw
    <<: *py39

conformance:
    image: "$CI_REGISTRY_IMAGE/conformance:latest"
    script:
        # Install rdap
        - pip install --index-url ${PIP_INDEX_URL-https://pypi.nic.cz/cznic/public} .
        # Start fake RDAP backend
        - omniNames -start &
        - python3 test_cfg/conformance/mock_fred.py &
        # Start RDAP
        - PYTHONPATH="./test_cfg/conformance:$PYTHONPATH" DJANGO_SETTINGS_MODULE='settings' django-admin runserver localhost:8000 &
        # Prepare conformance tests
        - git clone https://github.com/APNIC-net/rdap-conformance.git
        - (cd rdap-conformance && git checkout v0.6)
        - (cd rdap-conformance && mvn package --quiet)
        # Run the conformance test
        - java -jar rdap-conformance/target/rdap-conformance-0.6.jar test_cfg/conformance/rdap_conformance.json
